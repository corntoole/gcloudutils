// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protobufs/metric/metric.proto

/*
Package metric is a generated protocol buffer package.

It is generated from these files:
	protobufs/metric/metric.proto

It has these top-level messages:
	MetricTS
	MetricZTS
	Metric
*/
package metric

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Metric Time-Series struct. Used by OTSDB and RM_5.1 collectors
type MetricTS struct {
	// The metric name
	Metric string `protobuf:"bytes,1,opt,name=metric" json:"metric,omitempty"`
	// The time at which the value was captured
	Timestamp int64 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	// The metric value
	Value float64 `protobuf:"fixed64,3,opt,name=value" json:"value,omitempty"`
	// Metadata associated with this datapoint.
	Tags map[string]string `protobuf:"bytes,4,rep,name=tags" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *MetricTS) Reset()                    { *m = MetricTS{} }
func (m *MetricTS) String() string            { return proto.CompactTextString(m) }
func (*MetricTS) ProtoMessage()               {}
func (*MetricTS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MetricTS) GetMetric() string {
	if m != nil {
		return m.Metric
	}
	return ""
}

func (m *MetricTS) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *MetricTS) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *MetricTS) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

// Metric ZING Time-Series struct. Used for external datastores in ZING
type MetricZTS struct {
	// The metric name
	Metric string `protobuf:"bytes,1,opt,name=metric" json:"metric,omitempty"`
	// The time at which the value was captured
	Timestamp int64 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	// The metric value
	Value float64 `protobuf:"fixed64,3,opt,name=value" json:"value,omitempty"`
	// Id of the metric instance that owns this datapoint.
	Id string `protobuf:"bytes,4,opt,name=id" json:"id,omitempty"`
}

func (m *MetricZTS) Reset()                    { *m = MetricZTS{} }
func (m *MetricZTS) String() string            { return proto.CompactTextString(m) }
func (*MetricZTS) ProtoMessage()               {}
func (*MetricZTS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MetricZTS) GetMetric() string {
	if m != nil {
		return m.Metric
	}
	return ""
}

func (m *MetricZTS) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *MetricZTS) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *MetricZTS) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Metric struct used for all metric related processing flows
type Metric struct {
	// The metric name
	Metric string `protobuf:"bytes,1,opt,name=metric" json:"metric,omitempty"`
	// The time at which the value was captured
	Timestamp int64 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	// The metric value
	Value float64 `protobuf:"fixed64,3,opt,name=value" json:"value,omitempty"`
	// Identifies the MetricInstance that owns this datapoint
	Id string `protobuf:"bytes,4,opt,name=id" json:"id,omitempty"`
	// Dimensions associated with this datapoint.
	Dimensions map[string]string `protobuf:"bytes,5,rep,name=dimensions" json:"dimensions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Metadata associated with this datapoint.
	Metadata map[string]string `protobuf:"bytes,6,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Metric) Reset()                    { *m = Metric{} }
func (m *Metric) String() string            { return proto.CompactTextString(m) }
func (*Metric) ProtoMessage()               {}
func (*Metric) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Metric) GetMetric() string {
	if m != nil {
		return m.Metric
	}
	return ""
}

func (m *Metric) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Metric) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Metric) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Metric) GetDimensions() map[string]string {
	if m != nil {
		return m.Dimensions
	}
	return nil
}

func (m *Metric) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func init() {
	proto.RegisterType((*MetricTS)(nil), "metric.MetricTS")
	proto.RegisterType((*MetricZTS)(nil), "metric.MetricZTS")
	proto.RegisterType((*Metric)(nil), "metric.Metric")
}

func init() { proto.RegisterFile("protobufs/metric/metric.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 305 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x52, 0xcf, 0x4b, 0xc3, 0x30,
	0x14, 0x26, 0x69, 0x57, 0xd6, 0x27, 0xfe, 0x20, 0x88, 0x84, 0x52, 0xa5, 0xf4, 0xd4, 0x53, 0x04,
	0x3d, 0x38, 0x14, 0x3d, 0x88, 0x1e, 0x07, 0x52, 0x77, 0xf2, 0x96, 0xd9, 0x58, 0x82, 0xb6, 0x19,
	0x4d, 0x26, 0x6c, 0xff, 0x9c, 0xff, 0x87, 0x7f, 0x8d, 0x98, 0xc4, 0xce, 0xed, 0x36, 0xd0, 0x53,
	0xdf, 0xf7, 0xf5, 0x7d, 0xdf, 0xf7, 0xf2, 0x12, 0x38, 0x9e, 0x75, 0xca, 0xa8, 0xe9, 0xfc, 0x45,
	0x9f, 0x36, 0xc2, 0x74, 0xf2, 0xd9, 0x7f, 0x98, 0xe5, 0x49, 0xe4, 0x50, 0xfe, 0x81, 0x60, 0x38,
	0xb6, 0xe5, 0xe4, 0x91, 0x1c, 0x81, 0xa7, 0x29, 0xca, 0x50, 0x11, 0x97, 0x1e, 0x91, 0x14, 0x62,
	0x23, 0x1b, 0xa1, 0x0d, 0x6f, 0x66, 0x14, 0x67, 0xa8, 0x08, 0xca, 0x15, 0x41, 0x0e, 0x61, 0xf0,
	0xce, 0xdf, 0xe6, 0x82, 0x06, 0x19, 0x2a, 0x50, 0xe9, 0x00, 0x61, 0x10, 0x1a, 0x5e, 0x6b, 0x1a,
	0x66, 0x41, 0xb1, 0x73, 0x96, 0x30, 0x9f, 0xfe, 0x93, 0xc5, 0x26, 0xbc, 0xd6, 0xf7, 0xad, 0xe9,
	0x16, 0xa5, 0xed, 0x4b, 0x2e, 0x20, 0xee, 0x29, 0x72, 0x00, 0xc1, 0xab, 0x58, 0xf8, 0x29, 0xbe,
	0xcb, 0x55, 0x08, 0xb6, 0x9c, 0x03, 0x97, 0x78, 0x84, 0xf2, 0x1a, 0x62, 0x67, 0xfa, 0xf4, 0xc7,
	0x27, 0xd8, 0x03, 0x2c, 0x2b, 0x1a, 0x5a, 0x1f, 0x2c, 0xab, 0xfc, 0x13, 0x43, 0xe4, 0x92, 0xfe,
	0x33, 0x86, 0xdc, 0x00, 0x54, 0xb2, 0x11, 0xad, 0x96, 0xaa, 0xd5, 0x74, 0x60, 0xd7, 0x77, 0xb2,
	0xbe, 0x3e, 0x76, 0xd7, 0x37, 0xb8, 0x15, 0xfe, 0x52, 0x90, 0x11, 0x0c, 0x1b, 0x61, 0x78, 0xc5,
	0x0d, 0xa7, 0x91, 0x55, 0xa7, 0x1b, 0xea, 0xb1, 0xff, 0xed, 0xb4, 0x7d, 0x77, 0x72, 0x0d, 0xfb,
	0x1b, 0xc6, 0xdb, 0x5c, 0x44, 0x72, 0x05, 0xbb, 0x6b, 0xce, 0xdb, 0x88, 0x6f, 0x33, 0x48, 0x55,
	0x57, 0xb3, 0xa5, 0x68, 0x95, 0xd6, 0x6c, 0x29, 0xdb, 0xda, 0x3d, 0x54, 0x3f, 0xfa, 0x03, 0x9a,
	0x46, 0x16, 0x9f, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0xb5, 0x64, 0xd5, 0xd4, 0xd9, 0x02, 0x00,
	0x00,
}
